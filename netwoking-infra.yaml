AWSTemplateFormatVersion: 2010-09-09
Description: Udacity project 2 - Nickson Kipkorir


Parameters:
  EnvironmentName:
    Description: Environment name for all the resources
    Type: String

  VpcCIDR:
    Description: Ip adress range CIDR 
    Type: String
    Default:  10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Availabity zone one public Ip adress range CIDR 
    Type: String
    Default:  10.0.0.0/24

  PrivateSubnet1CIDR:
    Description: Availablity zone one private Ip adress range CIDR 
    Type: String
    Default:  10.0.2.0/24  

  PublicSubnet2CIDR:
    Description: Availablity zone two public  Ip adress range CIDR 
    Type: String
    Default:  10.0.1.0/24

  PrivateSubnet2CIDR:
    Description: Availablity zone two private Ip adress range CIDR 
    Type: String
    Default:  10.0.3.0/24 

  launchTemplateVersionNumber:
    Type: String  
    Default : 1    

  protocal:
    Description: protocal type for load balancer
    Type: String
    Default: http:// 



Resources: 
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags: 
        - Key: Name 
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC                

  PublicSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PrivateSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
          

  PublicSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  
  PrivateSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags: 
          - Key: Name 
            Value: !Sub ${EnvironmentName} Private Subnet (AZ2)   


  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties: 
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2: 
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2  


  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to our load balancer
        VpcId: !Ref  VPC
        SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId: !Ref VPC
        SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 8080
              ToPort: 8080
              CidrIp: 0.0.0.0/0
            
        SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0

  myWebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html
      ImageId: ami-08fdec01f5df9998f
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
        VPCZoneIdentifier: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
        LaunchConfigurationName: !Ref myWebAppLaunchConfig
        MinSize: '1'
        MaxSize: '5'
        TargetGroupARNs:
        - Ref: WebAppTargetGroup


  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
        Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
        SecurityGroups:
            - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        DefaultActions:
        - Type: forward
        TargetGroupArn:
            Ref: WebAppTargetGroup
        LoadBalancerArn:
            Ref: WebAppLB
        Port: '80'
        Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        Actions:
        - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
        Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: !Ref VPC
            

Outputs:
  WebAppLB: 
    Description: Reference to the created WebAppLB
    Value: !Sub ${protocal}!GetAtt WebAppLB.DNSName
  
                
          

